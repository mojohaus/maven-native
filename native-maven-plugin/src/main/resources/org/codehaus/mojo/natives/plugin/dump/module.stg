module(FILE, files) ::= <<
/*
 * The MIT License
 *
 * Copyright (c) 2004, The Codehaus
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy of this software and
 * associated documentation files (the "Software"), to deal in the Software without restriction,
 * including without limitation the rights to use, copy, modify, merge, publish, distribute,
 * sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all copies or
 * substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT
 * NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
 * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
 * DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 */

#include "<FILE>.h"

typedef struct {
    const char *filename;
    const size_t size;
    const unsigned char *content;
} dump;

static const dump REPOSITORY[] = {
    <files: {file | <entry(file)>}; wrap, anchor, separator=",\n">
};

const char *dump_get_filename(const dump_entry index) {
    const char *result = NULL;
    if(index \< sizeof(REPOSITORY) / sizeof(dump)) {
        result = REPOSITORY[index].filename;
    }
    return result;
}

const size_t dump_get_size(const dump_entry index) {
    size_t result = 0;
    if(index \< sizeof(REPOSITORY) / sizeof(dump)) {
        result = REPOSITORY[index].size;
    }
    return result;
}

const unsigned char *dump_get_content(const dump_entry index) {
    const unsigned char *result = NULL;
    if(index \< sizeof(REPOSITORY) / sizeof(dump)) {
        result = REPOSITORY[index].content;
    }
    return result;
}
>>

entry(dump) ::= <<
(dump const) {
    .filename = "<dump.fileName>",
    .size = <length(dump.content)>,
    .content = (const unsigned char *) &(unsigned char[]) {
        <dump.content; wrap, anchor, separator=",">
    }
}
>>